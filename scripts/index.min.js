
const OfficalServer = ["884700738603859978"]

function ServerBoard() { }

ServerBoard.prototype.init = async function () {

    const serversList = await (await fetch(`https://pserver-back.aknet.tech/v1/guilds`)).json()
    this.__loaderInfomation(`[DEBUG] : ${serversList.guilds.length}Guilds`)

    this.__loaderInfomation(`[Worker Init] : ${serversList.guilds.join('\n')}`)

    const serverlists = await Promise.all(
        serversList.guilds.map(async ( v , index ) => {
            const detailServer = await fetch(`https://pserver-back.aknet.tech/v1/guilds/${v}`).then(r => r.json())

            let IsNotDate = false
            let Verify = false
            const finder = OfficalServer.find(x => x === v)
            if (finder) Verify = true
            const Olddescription = (detailServer.infomations.description_markdown)
            const description = Olddescription.length > 30 ? Olddescription.substring(0, 30) + "\n<span class='tenten'>...</span>" : Olddescription
            if (typeof detailServer.infomations.lastUpdated === "undefined") IsNotDate = true
            const date = new Date(detailServer.infomations.lastUpdated)
            this.__loaderInfomation("[Worker] DONE Guild : " + v)

            return {
                index : date.getTime(),
                elements : `
                <div class="box" >
                    <a class="shadow" href="./guild.html?id=${v}">
                        <span class="title"> ${detailServer.name} ${Verify ? `<i class="fa-solid fa-check"></i>` : ""} </span>
                        <span class="subtitle">(${v})</span>
                    </a>
                    <br>
                    <span style="font-weight:bold">${Verify ? "このサーバーは公式です。" : ""}</span>
                    <hr>
                    <div class="description content">
                    <br>
                    <blockquote>
                        ${description.replaceAll('\n', "<br>")} 
                    </blockquote>
                    </div>
                    <div class="tags">
                        ${detailServer.infomations.tags.map(v => `<a class="tag" href="./search.html?tag=${v}">${v}</a>`).join(" ")} 
                    </div>
                    <p>${IsNotDate ? "最終更新 : 不明" : "<p> 最終更新 " + date.getMonth() + "/" + date.getDate() + " " + date.getHours() + ":" + (date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes()) + "</p>"}
                </div>
            `
            }
        })
    )
    console.log( serverlists )
    document.getElementById('guilds').innerHTML = serverlists.sort(( dataa , datab ) => datab.index - dataa.index).map( v => v.elements ).join(' ')
    document.getElementsByClassName('loadingDisplay').item(0).setAttribute('class', "hide")
}

ServerBoard.prototype.sleep = function sleep(waitMsec) {
    return new Promise(resolve => setTimeout(resolve, waitMsec));
}

ServerBoard.prototype.busySleep = function sleep(waitMsec) {
    const startMsec = new Date();
    while (new Date() - startMsec < waitMsec);
}

ServerBoard.prototype.__loaderInfomation = (content) => {
    console.log(content)
    document.getElementById('loaderInfomation').innerText += content + "\n"
}

window.onload = async () => {
    await new ServerBoard().init()
}